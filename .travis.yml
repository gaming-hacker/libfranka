#sudo: required
language: cpp
os: linux
dist: bionic
arch: amd64

git:
  depth: 3

cache:
  apt: true

branches:
  only:
  - master

addons:
  apt:
    packages:
    - build-essential
    - software-properties-common
    - doxygen
    - apache2
    - nasm
    - yasm
    - fftw3
    - fftw3-dev
    - libtbb-dev
    - libmpfr-dev
    - libgmp3-dev
    - libboost-all-dev
    - libopenblas-dev
    - libatlas-base-dev

env:
  global:
    - INTERFACE64=1
    - NUM_THREADS=8
    - OPENBLAS_NUM_THREADS=8
    - OMP_NUM_THREADS=8
    - GOTO_NUM_THREADS=8
    - CFLAGS="-O3 -pipe -m64 -mavx -mavx2 -mfma -mfpmath=sse -msse2 -msse3 -msse4.1 -msse4.2 -fomit-frame-pointer -fno-common"
    - DMACROS="-DNDEBUG -DHAVE_NASM -DPIC -DUSE_PTHREAD -D_REENTRANT -D_THREAD_SAFE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64"
    - CXXFLAGS="$CFLAGS -std=c++17 $DMACROS"
    - CFLAGS="$CFLAGS -std=c11 $DMACROS"
    - ASFLAGS="-f elf64"
    - ARFLAGS='rcs'
    - CPPFLAGS="-I/usr/local/include -I/usr/include"
    - LDFLAGS="-L/usr/local/lib -L/usr/lib"

jobs:
  include:
    - env: CI_DISTRO=bionic CI_TARGET=release
    - env: CI_DISTRO=bionic CI_TARGET=release CXXFLAGS="$CXXFLAGS -DNREALTIME" CFLAGS="$CFLAGS -DNREALTIME"

before_install:
  - echo "before install $PWD"
  - echo "CFLAGS $CFLAGS"
  - echo "CXXFLAGS $CXXFLAGS"
  #//--------------------install gcc9
  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
  - sudo apt-get -q update
  - sudo apt-get -y install gcc-9 g++-9 gfortran-9
  - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
  #//--------------------install clang9
  - curl -SL http://releases.llvm.org/9.0.0/clang%2bllvm-9.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz | tar -xJC .
  - sudo mv -f clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-18.04 /usr/local/clang_9.0.0
  - export PATH=/usr/local/clang_9.0.0/bin:$PATH
  - export LD_LIBRARY_PATH=/usr/local/clang_9.0.0/lib:/usr/local/lib:$LD_LIBRARY_PATH
  #//--------------------set compilers
  - export CC=/usr/local/clang_9.0.0/bin/clang
  - export CXX=/usr/local/clang_9.0.0/bin/clang++
  - export CPP="/usr/local/clang_9.0.0/bin/clang++ -E"
  - export FC=/usr/bin/gfortran-9
  - echo "CC-> $CC" && echo "C++> $CXX" && echo "F77> $FC"
  #//--------------------install updated cmake
  - wget https://github.com/Kitware/CMake/releases/download/v3.16.5/cmake-3.16.5-Linux-x86_64.tar.gz
  - tar -xvf cmake-3.16.5-Linux-x86_64.tar.gz
  - sudo cp -fR cmake-3.16.5-Linux-x86_64/bin/* /usr/local/bin/
  - sudo cp -fR cmake-3.16.5-Linux-x86_64/share/* /usr/local/share/
  - alias cmake=/usr/local/bin/cmake
  - /usr/local/bin/cmake --version
  #//--------------------install openblas
  #too long to build on travis, build from source on actual device
  #- git clone -b develop https://github.com/xianyi/OpenBLAS.git openblas
  #- pushd openblas && make -j12 PREFIX=/usr/local && sudo make install
  #- popd
  #//--------------------install updated sparsepack
  - git clone -b master https://github.com/DrTimothyAldenDavis/SuiteSparse.git suitesparse
  - pushd suitesparse
  #suitesparse likes gcc
  - export CC=/usr/bin/gcc && export CXX=/usr/bin/g++ && export CPP="/usr/bin/g++ -E"
  - prog=(SuiteSparse_config AMD COLAMD BTF CAMD CCOLAMD CHOLMOD KLU LDL CXSparse UMFPACK)
  - for i in "${prog[@]}"; do pushd $i; sudo make library; sudo make install INSTALL=/usr/local; popd; done
  - popd
  #reset compilers
  - export CC=/usr/local/clang_9.0.0/bin/clang
  - export CXX=/usr/local/clang_9.0.0/bin/clang++
  - export CPP="/usr/local/clang_9.0.0/bin/clang++ -E"
  #//--------------------install updated eigen
  - git clone -b master https://gitlab.com/libeigen/eigen.git
  - mkdir -p eigen/build && pushd eigen/build
  - echo "//--------------------build eigen--------------------//"
  - /usr/local/bin/cmake -G "Unix Makefiles" .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local
  - sudo make -j8
  - echo "//--------------------installing eigen--------------------//"
  - sudo make install
  - popd
  - echo "//--------------------finished eigen--------------------//"
  #//--------------------install updated poco
  - git clone -b master https://github.com/pocoproject/poco.git
  - mkdir -p poco/build && pushd poco/build
  - echo "//--------------------build Poco  --------------------//"
  - /usr/local/bin/cmake -G "Unix Makefiles" .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local
  - sudo make -j8
  - echo "//--------------------installing Poco--------------------//"
  - sudo make install
  - popd
  - echo "//--------------------finished Poco  --------------------//"
  - echo "cflags->$CFLAGS"
  - echo "//--------------------build libfranka--------------------//"
  - mkdir -p build && pushd build
  - export PocoFoundation_DIR=/usr/local/lib/cmake/Poco
  - export PocoNet_Dir=/usr/local/lib/cmake/Poco && export Poco_Dir=/usr/local/lib/cmake/Poco
  - export LDFLAGS="$LDFLAGS -L/usr/local/lib -lPocoFoundation -lPocoNet -lPocoUtil"
  - export CPPFLAGS="$CPPFLAGS -I/usr/local/include/Poco"
  - echo "CPPFLAGS $CPPFLAGS"
  - echo "LDFLAGS $LDFLAGS"
  - /usr/local/bin/cmake -G "Unix Makefiles" .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_BUILD_EXAMPLES=ON -DCMAKE_BUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=/usr/local
  - sudo make -j8
  - echo "//--------------------done building--------------------//"
  - echo "pwd->$PWD"

script:
  - echo "//--------------------start run_all_tests_asan--------------------//"
  - ./test/run_all_tests_asan
  - echo "//--------------------start run_all_tests_tsan--------------------//"
  - ./test/run_all_tests_tsan
  - echo "//--------------------start run_all_tests_ubsan--------------------//"
  - ./test/run_all_tests_ubsan
  - echo "//--------------------start run_all_tests--------------------//"
  - ./test/run_all_tests

notifications:
  email:
  - recipients: glen.alexander@jetbrains.com
    on_success: always
    on_failure: never
